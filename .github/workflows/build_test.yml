name: Build and Test Matrix

on: [pull_request]

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18497/w_BaseKit_p_2022.1.2.154_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18529/w_HPCKit_p_2022.1.2.116_offline.exe
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  SAMPLES_TAG: 2022.1.0

jobs:
  pipeline:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows 2019 MSVC",
            build_type: "Release",
            os: windows-2019,
          }
        - {
            name: "Ubuntu 20.04",
            build_type: "Release",
            os: ubuntu-20.04,
          }
        - {
            name: "Ubuntu 20.04 with SuperLU",
            build_type: "Release",
            super_lu: true,
            os: ubuntu-20.04,
          }
        - {
            name: "macOS Big Sur 11",
            build_type: "Release",
            os: macos-11,
          }
    steps:
#   - name: Setup GCC Fortran
#     if: runner.os == 'macOS'
#     uses: awvwgk/setup-fortran@main
#     id: setup-fortran

    - name: Checkout oneAPI scripts
      if: runner.os == 'Windows'
      uses: actions/checkout@v2
      with:
        repository: 'oneapi-src/oneapi-ci'
        path: 'oneapi'

    - name: Cache install oneAPI
      if: runner.os == 'Windows'
      id: cache-install
      uses: actions/cache@v2
      with:
        path: C:\Program Files (x86)\Intel\oneAPI\compiler
        key: install-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_FORTRAN_COMPONENTS }}-compiler-${{ hashFiles('**/oneapi/scripts/cache_exclude_windows.sh') }}

#    - name: Install oneAPI base kit
#      if: runner.os == 'Windows'
#      shell: bash
#      run: oneapi/scripts/install_windows.bat $WINDOWS_BASEKIT_URL $WINDOWS_DPCPP_COMPONENTS
#    - name: Build oneAPI base kit
#      if: runner.os == 'Windows'
#      shell: bash
#      run: oneapi/scripts/build_windows.bat dpc++ "" $SAMPLES_TAG

    - name: Install oneAPI HPC kit
      if: runner.os == 'Windows' && steps.cache-install.outputs.cache-hit != 'true'
      working-directory: oneapi
      shell: bash
      run: scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_FORTRAN_COMPONENTS
#   - name: Build oneAPI HPC kit
#      if: runner.os == 'Windows'
#      shell: bash
#      run: oneapi/scripts/build_windows.bat fortran "" $SAMPLES_TAG
    - name: Exclude unused files from cache
      if: runner.os == 'Windows' && steps.cache-install.outputs.cache-hit != 'true'
      working-directory: oneapi
      run: scripts/cache_exclude_windows.ps1

    - name: Checkout lungsim
      uses: actions/checkout@v2
      with:
        path: lungsim

    - name: Run get Fortran environment script
      id: setup-fortran-win
      if: runner.os == 'Windows'
      shell: bash
      working-directory: lungsim
      run: |
        latest_version=`.github/scripts/oneapi-env-vars-location.bat`
        echo "ifort compiler: $latest_version"
        latest_version=`echo $latest_version | tr '\' '/'`
        echo $latest_version
        #echo "::set-output name=env_bat::${latest_version}"
        echo "::set-output name=fc::${latest_version}"

    - name: Report CMake version
      run: cmake --version
    - name: Install SuperLU
      if: matrix.config.super_lu
      shell: bash
      run: sudo apt-get install libsuperlu-dev
    - name: Create virtual environment
      shell: cmake -P {0}
      id: create-venv
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(SYS_PYTHON_EXE python)
        else()
          set(SYS_PYTHON_EXE python3)
        endif()
        
        execute_process(
          COMMAND ${SYS_PYTHON_EXE} -m venv venv
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Failed to create virtual environment.")
        endif()
        
        if ("${{ runner.os }}" STREQUAL "Windows")
          file(GLOB PYTHON_EXE venv/Scripts/python.exe)
        else()
          file(GLOB PYTHON_EXE venv/bin/python)
        endif()      
        
        execute_process(
          COMMAND ${PYTHON_EXE} -m pip install numpy
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Failed to install numpy to virtual environment.")
        endif()
        
        execute_process(
          COMMAND echo "::set-output name=python_exe::${PYTHON_EXE}"
        )
    - name: Debug - Generate build instructions - Windows
      if: runner.os == 'Windows'
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        "C:\Program Files (x86)\Intel\oneAPI\compiler\2022.0.2\env\vars.bat"
        ${{ steps.setup-fortran-win.outputs.fc }} /QV
        echo "==============="
        echo %PATH%
        echo "==============="
        cmake -S lungsim -B build-lungsim -D CMAKE_Fortran_COMPILER=${{ steps.setup-fortran-win.outputs.fc }} -D AETHER_ENABLE_TESTS=FALSE -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
    - name: Generate build instructions - Windows
      if: runner.os == 'Windows'
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        "C:\Program Files (x86)\Intel\oneAPI\compiler\2022.0.2\env\vars.bat"
        cmake -S lungsim -B build-lungsim -D AETHER_ENABLE_TESTS=FALSE -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
    - name: Generate build instructions - Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        cmake \
          -S lungsim \
          -B build-lungsim \
          -D CMAKE_Fortran_COMPILER=gfortran \
          -D AETHER_ENABLE_TESTS=FALSE \
          -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
          -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
    - name: Generate build instructions - macOS
      shell: bash
      if: runner.os == 'macOS'
      run: |
        cmake \
          -S lungsim \
          -B build-lungsim \
          -D CMAKE_Fortran_COMPILER=gfortran-9 \
          -D AETHER_ENABLE_TESTS=FALSE \
          -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
          -D Python_EXECUTABLE=${{ steps.create-venv.outputs.python_exe }}
    - name: Build lungsim
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --build build-lungsim
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed.")
        endif()
    - name: Test lungsim
      shell: bash
      working-directory: build-lungsim
      run: |
        if [ ${{ runner.os }} = Windows ]; then
          cd src/bindings/python/Release
        else
          cd src/bindings/python
        fi
        
        ${{ steps.create-venv.outputs.python_exe }} - <<EOF
        
        import sys

        from aether import diagnostics

        initial_state = diagnostics.get_diagnostics_on()
        diagnostics.set_diagnostics_on(True)
        final_state = diagnostics.get_diagnostics_on()
        print("Initial state: {0}, Final state: {1}".format(initial_state, final_state))

        if initial_state != 0 or final_state != 1:
          print("Test failed.")
          sys.exit(1)
        else:
          print("Test succeeded.")
        
        EOF
        
        exit $?
